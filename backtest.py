"""
A backtesting module for simulating trading strategies on historical data.

This module provides functions for simulating trades based on buy/sell signals
generated by trading strategies and calculating portfolio performance metrics.

Typical usage example:
    from backtest import backtest_strategy
    final_value, total_return = backtest_strategy(data)
"""


def backtest_strategy(data, initial_capital=10000):
    """
    Backtest a trading strategy based on buy/sell signals.
    :param data: DataFrame with 'Signal' and 'Close' columns.
    :param initial_capital: Starting capital for the portfolio.
    :return: Final portfolio value and performance metrics.
    """
    # Initialize variables
    cash = initial_capital  # Starting capital
    position = 0  # Number of shares held
    portfolio_values = []  # Track portfolio value over time

    # Simulate trading based on signals
    for index, row in data.iterrows():
        if row['Signal'] == 1:  # Buy Signal
            position = cash // row['Close']  # Buy as many shares as possible
            cash -= position * row['Close']
        elif row['Signal'] == -1 and position > 0:  # Sell Signal
            cash += position * row['Close']  # Sell all shares
            position = 0

        # Calculate portfolio value
        portfolio_value = cash + (position * row['Close'])
        portfolio_values.append(portfolio_value)

    # Add portfolio value to the DataFrame
    data['Portfolio Value'] = portfolio_values

    # Calculate performance metrics
    final_value = portfolio_values[-1]
    total_return = (final_value - initial_capital) / initial_capital
    return final_value, total_return
